ИС Дракон © Тышов Г.Н. A
1,,,,,01.01.2015,"Tahoma,1,10,0,0",10,,,,
2,1,9,,,,,Интерфейс
36,2,60,90,,,,,,1,,,,,,,,0,
29,3,60,139,,-19,180,19,,6,,,Описание,,,"""Интерфейс FIFO dual-data очереди."",,""Интерфейс максимально упрощён, и определяет лишь две операции - помещение элемента в очередь, и извлечение элемента из очереди."",,""В обычной FIFO очереди, поставщик помещает элементы в очередь с тем, чтобы потребитель извлёк их в дальнейшем в том порядке, в каком они были помещены в очередь. Если очередь пуста, по причине того, что поставщик ещё не успел поместить новые элементы в очередь, а все ранее помещённые уже извлечены, то потребитель не может извлечь элемент, и ему приходится ожидать действий поставщика."",,""Dual-data очередь, если она не пуста, ничем не отличается от обычной - поставщик помещает элементы в очередь, а потребитель извлекает их в том же порядке, в каком они были помещены. Отличия проявляются когда очередь опустела, а потребитель пытается извлечь очередной элемент. В отличие от обычной, в dual-data очереди, потребитель, вместо ожидания действий поставщика, при попытке извлечения несуществующего элемента, помещает в очередь запрос. Этот запрос будет передан поставщику, и может быть им удовлетворён, когда поставщик попытается поместить элемент в очередь."",,""Концептуально, dual-data очередь может рассматриваться как очередь двух конкурирующих поставщиков: поставщика элементов и поставщика запросов. Каждый из этих поставщиков одновременно является потребителем объектов, предоставляемых другим, конкурирующим поставщиком. Если в """"гонке"""" лидирует поставщик элементов, то очередь наполняется элементами, которые затем потребляет поставщик запросов. Если же в """"гонке"""" лидирует поставщик запросов, то очередь наполняется запросами потребляемыми, в дальнейшем, поставщиком элементов.""",,0,
36,4,60,548,,,,,,,,,,,,,,0,
31,5,60,383,,-15,240,15,,4,,,"""Методы интерфейса""",,,"""Описание методов интерфейса.""",,0,
30,6,60,443,,-15,180,15,,5,,,enqueue,,,"""Помещение элемента в очередь."",,""Метод пытается поместить указанный элемент в конец очереди. Если операция завершается успешно, возвращает значение null. Однако, если в начале очереди присутствует запрос от потребителя, то помещение элемента прерывается, а упомянутый запрос извлекается из очереди и возвращается вызывающему методу."",,Аргументы:,""* Элемент, помещаемый в конец очереди."",,Результат:,""* null - Если в очереди отсутствовали запросы от потребителя и помещение элемента в очередь прошло успешно."",""* Запрос от потребителя извлечённый из начала очереди - В противном случае."",,Исключения:,""* Null pointer exception - Если указанный элемент не существует.""",,0,
30,7,60,503,,-15,180,15,,2,,,dequeue,,,"""Извлечение элемента из очереди."",,""Метод пытается извлечь из начала очереди и возвратить элемент, ранее помещённый в очередь поставщиком элементов. Если в начале очереди такой элемент отсутствует метод помещает в конец очереди указанный запрос и возвращает значение null."",,Аргументы:,""* Запрос, помещаемый в конец очереди."",,Результат:,""* Элемент, извлечённый из начала очереди."",""* null - Если в начале очереди отсутствовали элементы ранее помещённые поставщиком элементов."",,Исключения:,""* Null pointer exception - Если указанный запрос не существует.""",,0,
31,8,60,203,,-15,210,15,,7,,,"""Типовые параметры""",,,"""Описание типовых параметров.""",,0,
30,9,60,263,,-15,180,15,,8,,,T,,,"""Тип элементов помещаемых в очередь поставщиком.""",,0,
30,10,60,323,,-15,180,15,,3,,,R,,,"""Тип запросов помещаемых в очередь потребителем.""",,0,
